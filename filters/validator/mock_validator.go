// Code generated by MockGen. DO NOT EDIT.
// Source: filters/validator (interfaces: FailBasedFilter)

// Package validator is a generated GoMock package.
package validator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFailBasedFilter is a mock of FailBasedFilter interface.
type MockFailBasedFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFailBasedFilterMockRecorder
}

// MockFailBasedFilterMockRecorder is the mock recorder for MockFailBasedFilter.
type MockFailBasedFilterMockRecorder struct {
	mock *MockFailBasedFilter
}

// NewMockFailBasedFilter creates a new mock instance.
func NewMockFailBasedFilter(ctrl *gomock.Controller) *MockFailBasedFilter {
	mock := &MockFailBasedFilter{ctrl: ctrl}
	mock.recorder = &MockFailBasedFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailBasedFilter) EXPECT() *MockFailBasedFilterMockRecorder {
	return m.recorder
}

// IsValid mocks base method.
func (m *MockFailBasedFilter) IsValid(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockFailBasedFilterMockRecorder) IsValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockFailBasedFilter)(nil).IsValid), arg0)
}
