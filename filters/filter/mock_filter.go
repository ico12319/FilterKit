// Code generated by MockGen. DO NOT EDIT.
// Source: filters/filter (interfaces: Filter)

// Package filter is a generated GoMock package.
package filter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilter is a mock of Filter interface.
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
}

// MockFilterMockRecorder is the mock recorder for MockFilter.
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance.
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// Accepts mocks base method.
func (m *MockFilter) Accepts(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accepts", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accepts indicates an expected call of Accepts.
func (mr *MockFilterMockRecorder) Accepts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accepts", reflect.TypeOf((*MockFilter)(nil).Accepts), arg0)
}
